<Card Margin="Margin.Is3.OnAll" 
      Class="@(Provider.IsRekeyableObjectProvider ? "border-left-primary" : "border-left-secondary")">
    <Row Class="no-gutters">
        <Column ColumnSize="ColumnSize.Is3" Padding="Padding.Is2" Class="align-middle">
            @((MarkupString)Provider.SvgImage)
        </Column>
        <Column ColumnSize="ColumnSize.Is9">
            <CardBody>
                <CardTitle Size="5">
                    @if (!string.IsNullOrEmpty(Provider.Details.IconClass))
                    {
                        <i class="@Provider.Details.IconClass mr-2" />
                    }
                    @Provider.Details.Name
                    <small class="text-muted ml-2">@Provider.AssemblyVersion.ToString()</small>
                </CardTitle>
                <CardText>@Provider.Details.Description</CardText>
                <CardText><small class="text-muted">@System.IO.Path.GetFileName(Provider.OriginatingFile)</small></CardText>
                <CardText>
                    @if (Provider.AssemblyPublicKeyToken != null &&
                       Provider.AssemblyPublicKeyToken.Any())
                    {
                        <small class="text-muted">@BitConverter.ToString(Provider.AssemblyPublicKeyToken).Replace("-", "")</small>
                    }
                    else
                    {
                        <small class="text-warning font-weight-bold">This Provider assembly was not signed!</small>
                    }
                </CardText>
            </CardBody>
            
            <CardFooter Class="text-right border-left">
                <Icon Name="FontAwesomeIcons.Flask"
                      Class="@(Provider.Details.Features.HasFlag(ProviderFeatureFlags.IsTestable) ? "text-success" : "text-dark")"
                      title="@("Provider " + (Provider.Details.Features.HasFlag(ProviderFeatureFlags.IsTestable) ? "Supports" : "Does Not Support") + " Pre-Testing")"
                      Margin="Margin.Is2" />
                <Icon Name="FontAwesomeIcons.SyncAlt"
                      Class="@(Provider.Details.Features.HasFlag(ProviderFeatureFlags.CanRotateWithoutDowntime) ? "text-success" : "text-dark")"
                      title="@("Provider " + (Provider.Details.Features.HasFlag(ProviderFeatureFlags.CanRotateWithoutDowntime) ? "Can" : "Cannot") + " Rotate Without Downtime")"
                      Margin="Margin.Is2" />
                <Icon Name="FontAwesomeIcons.LayerGroup"
                      Class="@(Provider.Details.Features.HasFlag(ProviderFeatureFlags.HasCandidateSelection) ? "text-success" : "text-dark")"
                      title="@("Provider " + (Provider.Details.Features.HasFlag(ProviderFeatureFlags.HasCandidateSelection) ? "Supports" : "Does Not Support") + " Candidate Selection")"
                      Margin="Margin.Is2" />
                <Icon Name="FontAwesomeIcons.Key"
                      Class="@(Provider.Details.Features.HasFlag(ProviderFeatureFlags.SupportsSecondaryKey) ? "text-success" : "text-dark")"
                      title="@("Provider " + (Provider.Details.Features.HasFlag(ProviderFeatureFlags.SupportsSecondaryKey) ? "Supports" : "Does Not Support") + " Use of a Secondary Key")"
                      Margin="Margin.Is2" />
            </CardFooter>
        </Column>
    </Row>
</Card>

@code {
    [Parameter]
    public LoadedProviderViewModel Provider { get; set; } = new LoadedProviderViewModel();
}
