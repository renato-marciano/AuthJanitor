@page "/resources/{ResourceId}"

<Container Fluid="true">
    <Row Class="bg-light border-bottom">
        <Column ColumnSize="ColumnSize.Is2" Padding="Padding.Is2" Class="text-center">
            <div style="max-width:5em;margin: 0 auto;">
                @((MarkupString)_provider?.SvgImage)
            </div>
            <Paragraph Alignment="TextAlignment.Center"
                        Margin="Margin.Is2.OnX.Is1.OnY"
                        Padding="Padding.Is2"
                        Class="small border-top border-bottom border-secondary">@Resource.ProviderDetail.Name</Paragraph>
                        
        </Column>
        <Column ColumnSize="ColumnSize.Is10">
            <DisplayHeading Size="DisplayHeadingSize.Is4">@Resource.Name</DisplayHeading>
            <Paragraph>@Resource.Description</Paragraph>
        </Column>
    </Row>
    <Row Margin="Margin.Is2.OnY">
        <Column Margin="Margin.Is1.OnY" ColumnSize="ColumnSize.Is12">
            <ProviderSettingsCard ProviderConfiguration="@Resource.ProviderConfiguration" 
                                    ProviderType="@Resource.ProviderType"
                                    ShowEditControls="false" />
        </Column>
    </Row>
    <Row Margin="Margin.Is2.OnY">
        <Column Margin="Margin.Is1.OnY" ColumnSize="ColumnSize.Is6.OnDesktop.Is12">
            <RiskListCard Risks="@Resource.Risks" />
        </Column>
        <Column Margin="Margin.Is1.OnY" ColumnSize="ColumnSize.Is6.OnDesktop.Is12">
            <ActionDescriptionCard Description="@Resource.RuntimeDescription" />
        </Column>
    </Row>
</Container>

@using AuthJanitor.UI.Cards
@using AuthJanitor.UI.Shared.ViewModels
@code {
    [Parameter]
    public string ResourceId { get; set; }

    public ResourceViewModel Resource { get; set; } = new ResourceViewModel();
    protected LoadedProviderViewModel _provider;

    protected override async Task OnInitializedAsync()
    {
        Resource = await Http.AJGet<ResourceViewModel>(Guid.Parse(ResourceId));
        var providers = await Http.AJList<LoadedProviderViewModel>();
        _provider = providers.First(p => p.ProviderTypeName == Resource.ProviderType);
        Resource.ProviderConfiguration = await Http.AJGet<ProviderConfigurationViewModel>(Resource.ProviderType);
        Resource.ProviderConfiguration.SerializedConfiguration = Resource.SerializedProviderConfiguration;
    }
}