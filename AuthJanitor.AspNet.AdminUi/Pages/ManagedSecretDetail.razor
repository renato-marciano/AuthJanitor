@page "/managedSecrets/{SecretId}"

<Container Fluid="true">
    <Row Class="bg-light border-bottom" Padding="Padding.Is2.FromTop">
        <Column ColumnSize="ColumnSize.Is12">
            <Container Fluid="true">
                <Row Margin="Margin.Is1.FromTop">
                    <Column ColumnSize="ColumnSize.Is8.OnDesktop.Is12">
                        <DisplayHeading Size="DisplayHeadingSize.Is4">@Secret.Name</DisplayHeading>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is4.OnDesktop.Is1" Class="text-right">
                        @foreach (var resource in Secret.Resources)
                        {
                            <div style="width:2em; display:inline-block;" class="m-2">
                                @((MarkupString)_providers.FirstOrDefault(p => p.ProviderTypeName == resource.ProviderType)?.SvgImage)
                            </div>
                        }
                    </Column>
                </Row>
                <Row>
                    <Column ColumnSize="ColumnSize.Is12">
                        <Paragraph>@Secret.Description</Paragraph>
                    </Column>
                </Row>
                <Row>
                    <Column ColumnSize="ColumnSize.Is12" Margin="Margin.Is4.FromBottom.Is1.FromTop">
                        <ApprovalTypeComponent @bind-Value="@Secret.TaskConfirmationStrategies" />
                    </Column>
                </Row>
                <Row Margin="Margin.Is1.FromTop">
                    <Column ColumnSize="ColumnSize.Is6">
                        <div class="border rounded border-secondary clearfix">
                            <div class="bg-secondary text-light m-0 p-1 float-left">Last Changed</div>
                            @if (!Secret.LastChanged.HasValue)
                            {
                                <div class="float-left p-1 text-danger font-weight-bold"> Never</div>
                            }
                            else
                            {
                                <div class="float-left p-1"> @Secret.LastChanged</div>
                            }
                        </div>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6">
                        <div class="border rounded border-warning clearfix">
                            <div class="bg-warning text-dark m-0 p-1 float-left">Expires</div>
                            <div class="float-left p-1"> @Secret.Expiry</div>
                        </div>
                    </Column>
                </Row>
                <Row Margin="Margin.Is1.FromTop">
                    <Column ColumnSize="ColumnSize.Is12">
                        @{
                            Background barColor;
                            if (Secret.ExpiryPercent > 90) barColor = Background.Danger;
                            else if (Secret.ExpiryPercent > 75) barColor = Background.Warning;
                            else barColor = Background.Success;
                        }

                        <Progress Margin="Margin.Is3.FromBottom">
                            <ProgressBar Background="@barColor" Value="@Secret.ExpiryPercent">
                                @if (Secret.IsValid)
                                {
                                    @((DateTimeOffset.Now - Secret.LastChanged).GetValueOrDefault().ToReadableString(true))
                                }
                                else
                                {
                                    @("Expired for " + (DateTimeOffset.Now - Secret.LastChanged).GetValueOrDefault().ToReadableString(true))
                                }
                            </ProgressBar>
                        </Progress>
                    </Column>
                </Row>
            </Container>
        </Column>
    </Row>
    <Row Margin="Margin.Is3.FromTop">
        <Column ColumnSize="ColumnSize.Is12">
            <ResourceListCardAccordion Resources="@Secret.Resources" />
        </Column>
    </Row>
</Container>

@using AuthJanitor.UI.Cards
@using AuthJanitor.UI.Common.Secrets
@using AuthJanitor.UI.Shared.ViewModels
@using AuthJanitor.Providers
@inject IJSRuntime JSRuntime
@code {
    public ManagedSecretViewModel Secret { get; set; } = new ManagedSecretViewModel();

    [Parameter]
    public string SecretId { get; set; }

    public TimeSpan DurationSoFar => DateTimeOffset.UtcNow - Secret.LastChanged.GetValueOrDefault();
    protected IEnumerable<LoadedProviderViewModel> _providers;

    protected override async Task OnInitializedAsync()
    {
        _providers = await Http.AJList<LoadedProviderViewModel>();
        Secret = await Http.AJGet<ManagedSecretViewModel>(Guid.Parse(SecretId));
        await Task.WhenAll(Secret.Resources.Select(async resource =>
        {
            resource.ProviderConfiguration = await Http.AJGet<ProviderConfigurationViewModel>(resource.ProviderType);
            resource.ProviderConfiguration.SerializedConfiguration = resource.SerializedProviderConfiguration;
        }));
        await JSRuntime.InvokeAsync<object>("initializeCarousel");
    }
}
