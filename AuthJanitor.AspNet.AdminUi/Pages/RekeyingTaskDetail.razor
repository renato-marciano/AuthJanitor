@page "/rekeyingTasks/{RekeyingTaskId}"

    <Container Fluid="true">
        <Row Class="bg-light border-bottom" Padding="Padding.Is2.FromTop">
            <Column ColumnSize="ColumnSize.Is12">
                <Container Fluid="true">
                    <Row Margin="Margin.Is1.FromTop">
                        <Column ColumnSize="ColumnSize.Is8.OnDesktop.Is12">
                            <DisplayHeading Size="DisplayHeadingSize.Is4" Class="hasRekeyingTag">@Secret.Name</DisplayHeading>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is4.OnDesktop.Is1" Class="text-right">
                            @foreach (var resource in Secret.Resources)
                            {
                                <div style="width:2em; display:inline-block;" class="m-2">
                                    @((MarkupString)_providers.FirstOrDefault(p => p.ProviderTypeName == resource.ProviderType)?.SvgImage)
                                </div>
                            }
                        </Column>
                    </Row>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is12">
                            <Paragraph>@Secret.Description</Paragraph>
                        </Column>
                    </Row>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is12" Margin="Margin.Is4.FromBottom.Is1.FromTop">
                            <ApprovalTypeComponent @bind-Value="@Secret.TaskConfirmationStrategies" />
                        </Column>
                    </Row>
                    <Row Margin="Margin.Is1.FromTop">
                        <Column ColumnSize="ColumnSize.Is6">
                            <div class="border rounded border-secondary clearfix">
                                <div class="bg-secondary text-light m-0 p-1 float-left">Last Changed</div>
                                @if (!Secret.LastChanged.HasValue)
                                {
                                    <div class="float-left p-1 text-danger font-weight-bold"> Never</div>
                                }
                                else
                                {
                                    <div class="float-left p-1"> @Secret.LastChanged</div>
                                }
                            </div>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is6">
                            <div class="border rounded border-warning clearfix">
                                <div class="bg-warning text-dark m-0 p-1 float-left">Expires</div>
                                <div class="float-left p-1"> @Secret.Expiry</div>
                            </div>
                        </Column>
                    </Row>
                    <Row Margin="Margin.Is1.FromTop">
                        <Column ColumnSize="ColumnSize.Is12">
                            @{
                                Background barColor;
                                if (Secret.ExpiryPercent > 90) barColor = Background.Danger;
                                else if (Secret.ExpiryPercent > 75) barColor = Background.Warning;
                                else barColor = Background.Success;
                            }

                            <Progress Margin="Margin.Is3.FromBottom">
                                <ProgressBar Background="@barColor" Value="@Secret.ExpiryPercent">
                                    @if (Secret.IsValid)
                                    {
                                        @((DateTimeOffset.Now - Secret.LastChanged).GetValueOrDefault().ToReadableString(true))
                                    }
                                    else
                                    {
                                        @("Expired for " + (DateTimeOffset.Now - Secret.LastChanged).GetValueOrDefault().ToReadableString(true))
                                    }
                                </ProgressBar>
                            </Progress>
                        </Column>
                    </Row>
                </Container>
            </Column>
        </Row>
        <Row Margin="Margin.Is3.FromTop">
            <Column ColumnSize="ColumnSize.Is12">
                <ResourceListCardAccordion Resources="@Secret.Resources" />
            </Column>
        </Row>
        <Row Margin="Margin.Is3.FromTop">
            <Column ColumnSize="ColumnSize.Is12">
                <Card>
                    <CardHeader>Rekeying Attempts</CardHeader>
                    <CardBody>
                        @if (Task.Attempts.Any())
                        {
                            <Tabs SelectedTabChanged="@OnSelectedTabChanged" SelectedTab="@SelectedAttemptTab">
                                <Items>
                                    @foreach (var attempt in Task.Attempts)
                                    {
                                        <Tab Name="@attempt.AttemptStarted.ToString()">
                                            @if (attempt.IsSuccessfulAttempt && attempt.AttemptFinished != default)
                                            {
                                                <Icon Name="FontAwesomeIcons.CheckCircle" Class="text-success" />
                                            }
                                            else if (attempt.AttemptFinished != default)
                                            {
                                                <Icon Name="FontAwesomeIcons.TimesCircle" Class="text-danger" />
                                            }
                                            else
                                            {
                                                <Icon Name="FontAwesomeIcons.PlayCircle" Class="text-info" />
                                            }
                                            @attempt.UserDisplayName<br />
                                            <small>@attempt.AttemptStarted.ToString()</small>
                                        </Tab>
                                    }
                                </Items>
                                <Content>
                                    @foreach (var attempt in Task.Attempts)
                                    {
                                        <TabPanel Name="@attempt.AttemptStarted.ToString()"
                                                  Padding="Padding.Is1">
                                            <pre><code>@attempt.LogString</code></pre>
                                            @if (!attempt.IsSuccessfulAttempt)
                                            {
                                                <Alert Color="Color.Info" Visible="true">
                                                    <Heading Size="HeadingSize.Is4" TextColor="TextColor.Danger">
                                                        Exception Thrown!
                                                    </Heading>
                                                    <Paragraph>
                                                        <pre><code>@attempt.OuterException</code></pre>
                                                    </Paragraph>
                                                </Alert>
                                            }
                                        </TabPanel>
                                    }
                                </Content>
                            </Tabs>
                        }
                        else
                        {
                            <Paragraph Color="TextColor.Warning" Alignment="TextAlignment.Center" Padding="Padding.Is1.OnAll">There have been no attempts for this Task.</Paragraph>
                        }
                    </CardBody>
                </Card>
            </Column>
        </Row>
    </Container>

@using AuthJanitor.UI.Cards
@using AuthJanitor.UI.Common.Secrets
@using AuthJanitor.UI.Shared.ViewModels
@using AuthJanitor.Providers
@code {
    public ManagedSecretViewModel Secret => Task == null ? new ManagedSecretViewModel() : Task.ManagedSecret;
    public RekeyingTaskViewModel Task { get; set; } = new RekeyingTaskViewModel();

    [Parameter]
    public string RekeyingTaskId { get; set; }

    public TimeSpan DurationSoFar => DateTimeOffset.UtcNow - Secret.LastChanged.GetValueOrDefault();
    protected IEnumerable<LoadedProviderViewModel> _providers;

    protected override async Task OnInitializedAsync()
    {
        _providers = await Http.AJList<LoadedProviderViewModel>();
        Task = await Http.AJGet<RekeyingTaskViewModel>(Guid.Parse(RekeyingTaskId));
        if (Task.Attempts.Any())
            SelectedAttemptTab = Task.Attempts.OrderByDescending(a => a.AttemptStarted).FirstOrDefault()?.AttemptStarted.ToString();

        await System.Threading.Tasks.Task.WhenAll(Task.ManagedSecret.Resources.Select(async resource =>
        {
            resource.ProviderConfiguration = await Http.AJGet<ProviderConfigurationViewModel>(resource.ProviderType);
            resource.ProviderConfiguration.SerializedConfiguration = resource.SerializedProviderConfiguration;
        }));
    }

    string SelectedAttemptTab;
    private void OnSelectedTabChanged(string name)
    {
        SelectedAttemptTab = name;
    }
}